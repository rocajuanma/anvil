name: Post-Release Changelog Update

on:
  release:
    types: [published]  # Triggers after a release is successfully published

jobs:
  update-changelog:
    name: Update Changelog After Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Get release information
      id: release_info
      run: |
        # Extract version from tag (remove 'v' prefix if present)
        VERSION="${{ github.event.release.tag_name }}"
        VERSION_NUMBER="${VERSION#v}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        
        # Get current date
        RELEASE_DATE=$(date +"%Y-%m-%d")
        echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_OUTPUT
        
        echo "Processing release: $VERSION (version: $VERSION_NUMBER, date: $RELEASE_DATE)"

    - name: Update changelog
      run: |
        python3 .github/scripts/update-changelog.py \
          --version "${{ steps.release_info.outputs.VERSION_NUMBER }}" \
          --date "${{ steps.release_info.outputs.RELEASE_DATE }}" \
          --changelog-path "docs/CHANGELOG.md"

    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet docs/CHANGELOG.md; then
          echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          echo "No changes detected in changelog"
        else
          echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
          echo "Changes detected in changelog"
        fi

    - name: Create Pull Request
      if: steps.check_changes.outputs.HAS_CHANGES == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        base: master
        commit-message: "docs: update changelog for release ${{ steps.release_info.outputs.VERSION }}"
        title: "üìù Update changelog for release ${{ steps.release_info.outputs.VERSION }}"
        body: |
          ## üìù Changelog Update for Release ${{ steps.release_info.outputs.VERSION }}
          
          This PR automatically updates the changelog following the release of version ${{ steps.release_info.outputs.VERSION }}.
          
          ### Changes Made
          
          - ‚úÖ Moved `[Unreleased]` content to `[${{ steps.release_info.outputs.VERSION_NUMBER }}] - ${{ steps.release_info.outputs.RELEASE_DATE }}`
          - ‚úÖ Created new empty `[Unreleased]` section for future changes
          - ‚úÖ Updated changelog structure and formatting
          
          ### What to do next
          
          1. **Review** the changelog updates
          2. **Merge** this PR to complete the release process
          3. **Add new changes** to the `[Unreleased]` section for the next release
          
          ---
          
          This PR was automatically created by the post-release workflow.
        branch: changelog-update-${{ steps.release_info.outputs.VERSION }}
        delete-branch: true
        labels: |
          documentation
          automated-pr
          changelog

    - name: Summary
      run: |
        if [[ "${{ steps.check_changes.outputs.HAS_CHANGES }}" == "true" ]]; then
          echo "‚úÖ Changelog updated and PR created for review"
        else
          echo "‚ÑπÔ∏è  No changelog updates needed (no unreleased changes found)"
        fi
