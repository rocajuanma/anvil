name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.0
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="development"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binaries
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for macOS Intel (amd64)
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/anvil-darwin-amd64 main.go
        
        # Build for macOS Apple Silicon (arm64)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/anvil-darwin-arm64 main.go
        
        # Build for Linux amd64 (optional - for developers using Linux)
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/anvil-linux-amd64 main.go
        
        # Build for Linux arm64 (optional)
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o dist/anvil-linux-arm64 main.go

    - name: Generate checksums
      run: |
        cd dist
        shasum -a 256 * > checksums.txt
        cat checksums.txt

    - name: Extract release notes from changelog
      id: release_notes
      run: |
        # Extract content between [Unreleased] and the next version section
        awk '/^## \[Unreleased\]/{flag=1; next} /^## \[.*\]/{flag=0} flag' docs/CHANGELOG.md > temp_release_notes.md
        
        # Remove empty lines at the beginning and end, but preserve internal structure
        sed '/./,$!d' temp_release_notes.md > release_notes_content.md
        
        # Create formatted release notes with header
        echo "## 🎉 Anvil ${{ steps.version.outputs.VERSION }}" > formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        
        # Add the changelog content
        cat release_notes_content.md >> formatted_release_notes.md
        
        # Add the installation section
        echo "" >> formatted_release_notes.md
        echo "### 🚀 Get Started in 30 Seconds" >> formatted_release_notes.md
        echo '```bash' >> formatted_release_notes.md
        echo 'curl -sSL https://github.com/rocajuanma/anvil/releases/latest/download/install.sh | bash' >> formatted_release_notes.md
        echo 'anvil --version' >> formatted_release_notes.md
        echo 'anvil init && anvil install dev' >> formatted_release_notes.md
        echo '```' >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "### 💬 Join the Community" >> formatted_release_notes.md
        echo "- 🎯 [Check out our docs](https://github.com/rocajuanma/anvil/blob/master/docs/GETTING_STARTED.md)" >> formatted_release_notes.md
        echo "- 🐛 [Report issues](https://github.com/rocajuanma/anvil/issues)" >> formatted_release_notes.md
        echo "- 💡 [Request features](https://github.com/rocajuanma/anvil/discussions)" >> formatted_release_notes.md
        echo "- ⭐ Star us if Anvil saves you time!" >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "### 📦 Manual Downloads" >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "**macOS Intel:**" >> formatted_release_notes.md
        echo '```bash' >> formatted_release_notes.md
        echo "curl -L https://github.com/rocajuanma/anvil/releases/download/${{ steps.version.outputs.VERSION }}/anvil-darwin-amd64 -o anvil" >> formatted_release_notes.md
        echo "chmod +x anvil" >> formatted_release_notes.md
        echo "sudo mv anvil /usr/local/bin/" >> formatted_release_notes.md
        echo '```' >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "**macOS Apple Silicon:**" >> formatted_release_notes.md
        echo '```bash' >> formatted_release_notes.md
        echo "curl -L https://github.com/rocajuanma/anvil/releases/download/${{ steps.version.outputs.VERSION }}/anvil-darwin-arm64 -o anvil" >> formatted_release_notes.md
        echo "chmod +x anvil" >> formatted_release_notes.md
        echo "sudo mv anvil /usr/local/bin/" >> formatted_release_notes.md
        echo '```' >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "**Linux:**" >> formatted_release_notes.md
        echo '```bash' >> formatted_release_notes.md
        echo "curl -L https://github.com/rocajuanma/anvil/releases/download/${{ steps.version.outputs.VERSION }}/anvil-linux-amd64 -o anvil" >> formatted_release_notes.md
        echo "chmod +x anvil" >> formatted_release_notes.md
        echo "sudo mv anvil /usr/local/bin/" >> formatted_release_notes.md
        echo '```' >> formatted_release_notes.md
        echo "---" >> formatted_release_notes.md
        echo "" >> formatted_release_notes.md
        echo "**📋 Checksums:** See \`checksums.txt\` for file verification" >> formatted_release_notes.md
        
        # Set as output using the multiline format
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat formatted_release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Debug: show what was extracted
        echo "=== Extracted Release Notes ==="
        cat formatted_release_notes.md
        echo "==============================="

    - name: Create universal macOS binary (macOS only)
      run: |
        # Note: We can't create universal binaries on Linux, so we'll provide separate arch binaries
        # Users can download the appropriate one, or we could set up a macOS runner for this step
        echo "Skipping universal binary creation on Linux runner"
        echo "Providing separate intel and arm64 binaries instead"

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Anvil ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          dist/anvil-darwin-amd64
          dist/anvil-darwin-arm64
          dist/anvil-linux-amd64
          dist/anvil-linux-arm64
          dist/checksums.txt
          install.sh
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
